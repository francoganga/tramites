// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/francoganga/go_reno2/ent/event"
	"github.com/francoganga/go_reno2/ent/tramite"
	"github.com/google/uuid"
)

// TramiteCreate is the builder for creating a Tramite entity.
type TramiteCreate struct {
	config
	mutation *TramiteMutation
	hooks    []Hook
}

// SetAnoPresupuestario sets the "anoPresupuestario" field.
func (tc *TramiteCreate) SetAnoPresupuestario(i int) *TramiteCreate {
	tc.mutation.SetAnoPresupuestario(i)
	return tc
}

// SetLink sets the "link" field.
func (tc *TramiteCreate) SetLink(s string) *TramiteCreate {
	tc.mutation.SetLink(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TramiteCreate) SetCreatedAt(t time.Time) *TramiteCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TramiteCreate) SetNillableCreatedAt(t *time.Time) *TramiteCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TramiteCreate) SetUpdatedAt(t time.Time) *TramiteCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TramiteCreate) SetNillableUpdatedAt(t *time.Time) *TramiteCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCategoria sets the "categoria" field.
func (tc *TramiteCreate) SetCategoria(s string) *TramiteCreate {
	tc.mutation.SetCategoria(s)
	return tc
}

// SetVersion sets the "version" field.
func (tc *TramiteCreate) SetVersion(i int) *TramiteCreate {
	tc.mutation.SetVersion(i)
	return tc
}

// SetID sets the "id" field.
func (tc *TramiteCreate) SetID(u uuid.UUID) *TramiteCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TramiteCreate) SetNillableID(u *uuid.UUID) *TramiteCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (tc *TramiteCreate) AddEventIDs(ids ...int) *TramiteCreate {
	tc.mutation.AddEventIDs(ids...)
	return tc
}

// AddEvents adds the "events" edges to the Event entity.
func (tc *TramiteCreate) AddEvents(e ...*Event) *TramiteCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tc.AddEventIDs(ids...)
}

// Mutation returns the TramiteMutation object of the builder.
func (tc *TramiteCreate) Mutation() *TramiteMutation {
	return tc.mutation
}

// Save creates the Tramite in the database.
func (tc *TramiteCreate) Save(ctx context.Context) (*Tramite, error) {
	var (
		err  error
		node *Tramite
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TramiteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tramite)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TramiteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TramiteCreate) SaveX(ctx context.Context) *Tramite {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TramiteCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TramiteCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TramiteCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tramite.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tramite.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tramite.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TramiteCreate) check() error {
	if _, ok := tc.mutation.AnoPresupuestario(); !ok {
		return &ValidationError{Name: "anoPresupuestario", err: errors.New(`ent: missing required field "Tramite.anoPresupuestario"`)}
	}
	if _, ok := tc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Tramite.link"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tramite.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tramite.updated_at"`)}
	}
	if _, ok := tc.mutation.Categoria(); !ok {
		return &ValidationError{Name: "categoria", err: errors.New(`ent: missing required field "Tramite.categoria"`)}
	}
	if _, ok := tc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Tramite.version"`)}
	}
	return nil
}

func (tc *TramiteCreate) sqlSave(ctx context.Context) (*Tramite, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TramiteCreate) createSpec() (*Tramite, *sqlgraph.CreateSpec) {
	var (
		_node = &Tramite{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tramite.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tramite.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.AnoPresupuestario(); ok {
		_spec.SetField(tramite.FieldAnoPresupuestario, field.TypeInt, value)
		_node.AnoPresupuestario = value
	}
	if value, ok := tc.mutation.Link(); ok {
		_spec.SetField(tramite.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tramite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tramite.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Categoria(); ok {
		_spec.SetField(tramite.FieldCategoria, field.TypeString, value)
		_node.Categoria = value
	}
	if value, ok := tc.mutation.Version(); ok {
		_spec.SetField(tramite.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if nodes := tc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tramite.EventsTable,
			Columns: []string{tramite.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TramiteCreateBulk is the builder for creating many Tramite entities in bulk.
type TramiteCreateBulk struct {
	config
	builders []*TramiteCreate
}

// Save creates the Tramite entities in the database.
func (tcb *TramiteCreateBulk) Save(ctx context.Context) ([]*Tramite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tramite, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TramiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TramiteCreateBulk) SaveX(ctx context.Context) []*Tramite {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TramiteCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TramiteCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
