// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/francoganga/go_reno2/ent/predicate"
	"github.com/francoganga/go_reno2/ent/tramite"
)

// TramiteUpdate is the builder for updating Tramite entities.
type TramiteUpdate struct {
	config
	hooks    []Hook
	mutation *TramiteMutation
}

// Where appends a list predicates to the TramiteUpdate builder.
func (tu *TramiteUpdate) Where(ps ...predicate.Tramite) *TramiteUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAnoPresupuestario sets the "anoPresupuestario" field.
func (tu *TramiteUpdate) SetAnoPresupuestario(i int) *TramiteUpdate {
	tu.mutation.ResetAnoPresupuestario()
	tu.mutation.SetAnoPresupuestario(i)
	return tu
}

// AddAnoPresupuestario adds i to the "anoPresupuestario" field.
func (tu *TramiteUpdate) AddAnoPresupuestario(i int) *TramiteUpdate {
	tu.mutation.AddAnoPresupuestario(i)
	return tu
}

// SetLink sets the "link" field.
func (tu *TramiteUpdate) SetLink(s string) *TramiteUpdate {
	tu.mutation.SetLink(s)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TramiteUpdate) SetCreatedAt(t time.Time) *TramiteUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TramiteUpdate) SetNillableCreatedAt(t *time.Time) *TramiteUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TramiteUpdate) ClearCreatedAt() *TramiteUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TramiteUpdate) SetUpdatedAt(t time.Time) *TramiteUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TramiteUpdate) SetNillableUpdatedAt(t *time.Time) *TramiteUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TramiteUpdate) ClearUpdatedAt() *TramiteUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetCategoria sets the "categoria" field.
func (tu *TramiteUpdate) SetCategoria(s string) *TramiteUpdate {
	tu.mutation.SetCategoria(s)
	return tu
}

// SetVersion sets the "version" field.
func (tu *TramiteUpdate) SetVersion(i int) *TramiteUpdate {
	tu.mutation.ResetVersion()
	tu.mutation.SetVersion(i)
	return tu
}

// AddVersion adds i to the "version" field.
func (tu *TramiteUpdate) AddVersion(i int) *TramiteUpdate {
	tu.mutation.AddVersion(i)
	return tu
}

// Mutation returns the TramiteMutation object of the builder.
func (tu *TramiteUpdate) Mutation() *TramiteMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TramiteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TramiteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TramiteUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TramiteUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TramiteUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TramiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tramite.Table,
			Columns: tramite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tramite.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.AnoPresupuestario(); ok {
		_spec.SetField(tramite.FieldAnoPresupuestario, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAnoPresupuestario(); ok {
		_spec.AddField(tramite.FieldAnoPresupuestario, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Link(); ok {
		_spec.SetField(tramite.FieldLink, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tramite.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(tramite.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tramite.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tramite.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Categoria(); ok {
		_spec.SetField(tramite.FieldCategoria, field.TypeString, value)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(tramite.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedVersion(); ok {
		_spec.AddField(tramite.FieldVersion, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tramite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TramiteUpdateOne is the builder for updating a single Tramite entity.
type TramiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TramiteMutation
}

// SetAnoPresupuestario sets the "anoPresupuestario" field.
func (tuo *TramiteUpdateOne) SetAnoPresupuestario(i int) *TramiteUpdateOne {
	tuo.mutation.ResetAnoPresupuestario()
	tuo.mutation.SetAnoPresupuestario(i)
	return tuo
}

// AddAnoPresupuestario adds i to the "anoPresupuestario" field.
func (tuo *TramiteUpdateOne) AddAnoPresupuestario(i int) *TramiteUpdateOne {
	tuo.mutation.AddAnoPresupuestario(i)
	return tuo
}

// SetLink sets the "link" field.
func (tuo *TramiteUpdateOne) SetLink(s string) *TramiteUpdateOne {
	tuo.mutation.SetLink(s)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TramiteUpdateOne) SetCreatedAt(t time.Time) *TramiteUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TramiteUpdateOne) SetNillableCreatedAt(t *time.Time) *TramiteUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TramiteUpdateOne) ClearCreatedAt() *TramiteUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TramiteUpdateOne) SetUpdatedAt(t time.Time) *TramiteUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TramiteUpdateOne) SetNillableUpdatedAt(t *time.Time) *TramiteUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TramiteUpdateOne) ClearUpdatedAt() *TramiteUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetCategoria sets the "categoria" field.
func (tuo *TramiteUpdateOne) SetCategoria(s string) *TramiteUpdateOne {
	tuo.mutation.SetCategoria(s)
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TramiteUpdateOne) SetVersion(i int) *TramiteUpdateOne {
	tuo.mutation.ResetVersion()
	tuo.mutation.SetVersion(i)
	return tuo
}

// AddVersion adds i to the "version" field.
func (tuo *TramiteUpdateOne) AddVersion(i int) *TramiteUpdateOne {
	tuo.mutation.AddVersion(i)
	return tuo
}

// Mutation returns the TramiteMutation object of the builder.
func (tuo *TramiteUpdateOne) Mutation() *TramiteMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TramiteUpdateOne) Select(field string, fields ...string) *TramiteUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tramite entity.
func (tuo *TramiteUpdateOne) Save(ctx context.Context) (*Tramite, error) {
	var (
		err  error
		node *Tramite
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TramiteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tramite)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TramiteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TramiteUpdateOne) SaveX(ctx context.Context) *Tramite {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TramiteUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TramiteUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TramiteUpdateOne) sqlSave(ctx context.Context) (_node *Tramite, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tramite.Table,
			Columns: tramite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tramite.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tramite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tramite.FieldID)
		for _, f := range fields {
			if !tramite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tramite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.AnoPresupuestario(); ok {
		_spec.SetField(tramite.FieldAnoPresupuestario, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAnoPresupuestario(); ok {
		_spec.AddField(tramite.FieldAnoPresupuestario, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Link(); ok {
		_spec.SetField(tramite.FieldLink, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tramite.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tramite.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tramite.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tramite.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Categoria(); ok {
		_spec.SetField(tramite.FieldCategoria, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(tramite.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedVersion(); ok {
		_spec.AddField(tramite.FieldVersion, field.TypeInt, value)
	}
	_node = &Tramite{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tramite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
