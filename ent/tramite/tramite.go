// Code generated by ent, DO NOT EDIT.

package tramite

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tramite type in the database.
	Label = "tramite"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAnoPresupuestario holds the string denoting the anopresupuestario field in the database.
	FieldAnoPresupuestario = "ano_presupuestario"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCategoria holds the string denoting the categoria field in the database.
	FieldCategoria = "categoria"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the tramite in the database.
	Table = "tramites"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "tramite_events"
)

// Columns holds all SQL columns for tramite fields.
var Columns = []string{
	FieldID,
	FieldAnoPresupuestario,
	FieldLink,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCategoria,
	FieldVersion,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tramites"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tramites",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
