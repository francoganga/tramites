// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/francoganga/go_reno2/ent/tramite"
	"github.com/google/uuid"
)

// Tramite is the model entity for the Tramite schema.
type Tramite struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AnoPresupuestario holds the value of the "anoPresupuestario" field.
	AnoPresupuestario int `json:"anoPresupuestario,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Categoria holds the value of the "categoria" field.
	Categoria string `json:"categoria,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TramiteQuery when eager-loading is set.
	Edges         TramiteEdges `json:"edges"`
	user_tramites *int
}

// TramiteEdges holds the relations/edges for other nodes in the graph.
type TramiteEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e TramiteEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tramite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tramite.FieldAnoPresupuestario, tramite.FieldVersion:
			values[i] = new(sql.NullInt64)
		case tramite.FieldLink, tramite.FieldCategoria:
			values[i] = new(sql.NullString)
		case tramite.FieldCreatedAt, tramite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tramite.FieldID:
			values[i] = new(uuid.UUID)
		case tramite.ForeignKeys[0]: // user_tramites
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tramite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tramite fields.
func (t *Tramite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tramite.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tramite.FieldAnoPresupuestario:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field anoPresupuestario", values[i])
			} else if value.Valid {
				t.AnoPresupuestario = int(value.Int64)
			}
		case tramite.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				t.Link = value.String
			}
		case tramite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tramite.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tramite.FieldCategoria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categoria", values[i])
			} else if value.Valid {
				t.Categoria = value.String
			}
		case tramite.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = int(value.Int64)
			}
		case tramite.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_tramites", value)
			} else if value.Valid {
				t.user_tramites = new(int)
				*t.user_tramites = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the Tramite entity.
func (t *Tramite) QueryEvents() *EventQuery {
	return (&TramiteClient{config: t.config}).QueryEvents(t)
}

// Update returns a builder for updating this Tramite.
// Note that you need to call Tramite.Unwrap() before calling this method if this Tramite
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tramite) Update() *TramiteUpdateOne {
	return (&TramiteClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tramite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tramite) Unwrap() *Tramite {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tramite is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tramite) String() string {
	var builder strings.Builder
	builder.WriteString("Tramite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("anoPresupuestario=")
	builder.WriteString(fmt.Sprintf("%v", t.AnoPresupuestario))
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(t.Link)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("categoria=")
	builder.WriteString(t.Categoria)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", t.Version))
	builder.WriteByte(')')
	return builder.String()
}

// Tramites is a parsable slice of Tramite.
type Tramites []*Tramite

func (t Tramites) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
